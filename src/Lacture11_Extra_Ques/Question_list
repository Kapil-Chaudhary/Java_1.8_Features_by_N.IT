
1. get all the male employees --> List<Employee_Name>
    List<String> collect1 = employeeList.stream().filter(emp -> emp.getGender() == "Male").map(Employee::getName).collect(Collectors.toList());

2. How many male and female employees are there in the organization? --> map<gender, count>
    Map<String, Long> collect1 = employeeList.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.counting()));

3. get map<Male, List<Employee>>
    Map<String, List<Employee>> collect2 = employeeList.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.toList()));

4. get all male and list of their name ---> Map<Gender, List<Employee Name>>
    Map<String, List<String>> collect3 = employeeList.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.mapping(Employee::getName, Collectors.toList())));

5. Print the name of all departments in the organization?
     List<String> collect5 = employeeList.stream().map(Employee::getDepartment).distinct().collect(Collectors.toList());

6. What is the average age of male and female employees?
    Map<String, Double> collect6 = employeeList.stream().collect(Collectors.groupingBy(Employee::getGender, Collectors.averagingInt(Employee::getAge)));

7. Get the details of highest paid employee in the organization?
    employeeList.stream().collect(Collectors.maxBy(Comparator.comparingDouble(Employee::getSalary))).ifPresent(System.out::println);

8. Get the names of all employees who have joined after 2015 ?
        List<String> collect8 = employeeList.stream().filter(employee -> employee.getYearOfJoining() > 2015).collect(Collectors.mapping(Employee::getName, Collectors.toList()));
        List<String> collect8 = employeeList.stream().filter(employee -> employee.getYearOfJoining() > 2015).map(employee -> employee.getName()).collect(Collectors.toList());

9. Count the number of employees in each department?
     Map<String, Long> collect9 = employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment, Collectors.counting()));

10. What is the average salary of each department?
    Map<String, Double> collect10 = employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment, Collectors.averagingDouble(Employee::getSalary)));

11. collect the data in the format Emp<deptName, List<emp_names>> but salary of all the emp is grater then 13500.0
    Map<String, List<String>> collect11 = employeeList.stream().filter(employee -> employee.getSalary() > 13500.0).collect(Collectors.groupingBy(Employee::getDepartment, Collectors.mapping(Employee::getName, Collectors.toList())));
    System.out.println(collect11);

12. Given List<Integer> list = Arrays.asList(2, 3, 4, 5, 6, 7, 8, 9):
     -> Filter out all even numbers.
     -> Divide all filtered numbers by 2.
     -> Print the sum.
